// Project data for the portfolio
export interface Project {
  title: string;
  description: string;
  image: string;
  technologies: string[];
  github: string;
  live: string;
  category: string;
  codeSnippet: string[];
  codeLanguage: string;
  features: string[];
  screenshots?: string[];
  featured?: boolean;
}

export const projects: Project[] = [
  {
    title: 'HygieiaAI',
    description: 'An AI-powered healthcare platform that uses machine learning to predict patient outcomes and recommend personalized treatment plans. The system integrates with existing healthcare systems to provide real-time insights and improve patient care.',
    image: '/projects/project1.png',
    technologies: ['Python', 'TensorFlow', 'React', 'Node.js', 'MongoDB'],
    github: 'https://github.com/yourusername/hygieia-ai',
    live: 'https://hygieia-ai.vercel.app',
    category: 'AI & Healthcare',
    codeSnippet: [
      '# HygieiaAI - Patient Outcome Prediction Model',
      'import tensorflow as tf',
      'import numpy as np',
      'from sklearn.model_selection import train_test_split',
      '',
      'class PatientOutcomePredictor:',
      '    def __init__(self, input_dim, hidden_layers=[128, 64, 32]):',
      '        self.model = self._build_model(input_dim, hidden_layers)',
      '',
      '    def _build_model(self, input_dim, hidden_layers):',
      '        model = tf.keras.Sequential()',
      '        # Input layer',
      '        model.add(tf.keras.layers.Dense(hidden_layers[0], input_dim=input_dim, activation="relu"))',
      '        model.add(tf.keras.layers.BatchNormalization())',
      '        model.add(tf.keras.layers.Dropout(0.3))',
      '',
      '        # Hidden layers',
      '        for units in hidden_layers[1:]:',
      '            model.add(tf.keras.layers.Dense(units, activation="relu"))',
      '            model.add(tf.keras.layers.BatchNormalization())',
      '            model.add(tf.keras.layers.Dropout(0.3))',
      '',
      '        # Output layer - multi-class classification for different outcomes',
      '        model.add(tf.keras.layers.Dense(5, activation="softmax"))',
      '',
      '        model.compile(',
      '            optimizer=tf.keras.optimizers.Adam(learning_rate=0.001),',
      '            loss="categorical_crossentropy",',
      '            metrics=["accuracy"]',
      '        )',
      '        return model',
      '',
      '    def train(self, X, y, validation_split=0.2, epochs=50, batch_size=32):',
      '        X_train, X_val, y_train, y_val = train_test_split(',
      '            X, y, test_size=validation_split, random_state=42',
      '        )',
      '',
      '        history = self.model.fit(',
      '            X_train, y_train,',
      '            validation_data=(X_val, y_val),',
      '            epochs=epochs,',
      '            batch_size=batch_size,',
      '            callbacks=[',
      '                tf.keras.callbacks.EarlyStopping(',
      '                    monitor="val_loss", patience=10, restore_best_weights=True',
      '                )',
      '            ]',
      '        )',
      '        return history',
      '',
      '    def predict(self, X):',
      '        return self.model.predict(X)',
      '',
      '# Example usage',
      'predictor = PatientOutcomePredictor(input_dim=100)',
      'history = predictor.train(patient_data, patient_outcomes)',
      'predictions = predictor.predict(new_patient_data)'
    ],
    codeLanguage: 'python',
    features: [
      'AI-powered patient outcome prediction',
      'Real-time health monitoring',
      'Integration with existing healthcare systems',
      'Personalized treatment recommendations',
      'Secure patient data handling'
    ],
    screenshots: [
      '/projects/project1.png',
      '/projects/project2.png',
      '/projects/project3.png'
    ],
    featured: true
  },
  {
    title: 'EcoTrack',
    description: 'A sustainability platform that helps individuals and businesses track and reduce their carbon footprint. Features include personalized recommendations, progress tracking, and community challenges.',
    image: '/projects/project4.png',
    technologies: ['React', 'Node.js', 'MongoDB', 'D3.js', 'Material UI'],
    github: 'https://github.com/yourusername/ecotrack',
    live: 'https://ecotrack.vercel.app',
    category: 'Sustainability',
    codeSnippet: [
      '// Carbon Footprint Calculator Component',
      'import React, { useState, useEffect } from "react";',
      'import { calculateTransportEmissions, calculateEnergyEmissions } from "../utils/calculations";',
      '',
      'const CarbonCalculator = ({ userId, onSave }) => {',
      '  const [formData, setFormData] = useState({',
      '    transportation: {',
      '      carMiles: 0,',
      '      publicTransitMiles: 0,',
      '      flightHours: 0',
      '    },',
      '    energy: {',
      '      electricityKwh: 0,',
      '      naturalGasTherm: 0',
      '    },',
      '    diet: {',
      '      meatConsumption: "medium", // low, medium, high',
      '      localFoodPercentage: 20',
      '    }',
      '  });',
      '',
      '  const [results, setResults] = useState(null);',
      '',
      '  const handleInputChange = (category, field, value) => {',
      '    setFormData({',
      '      ...formData,',
      '      [category]: {',
      '        ...formData[category],',
      '        [field]: value',
      '      }',
      '    });',
      '  };',
      '',
      '  const calculateFootprint = () => {',
      '    const transportEmissions = calculateTransportEmissions(',
      '      formData.transportation.carMiles,',
      '      formData.transportation.publicTransitMiles,',
      '      formData.transportation.flightHours',
      '    );',
      '',
      '    const energyEmissions = calculateEnergyEmissions(',
      '      formData.energy.electricityKwh,',
      '      formData.energy.naturalGasTherm',
      '    );',
      '',
      '    // Calculate diet emissions based on consumption patterns',
      '    let dietFactor = 1;',
      '    switch(formData.diet.meatConsumption) {',
      '      case "low":',
      '        dietFactor = 0.7;',
      '        break;',
      '      case "medium":',
      '        dietFactor = 1;',
      '        break;',
      '      case "high":',
      '        dietFactor = 1.4;',
      '        break;',
      '    }',
      '',
      '    // Local food reduces emissions',
      '    const localFoodReduction = formData.diet.localFoodPercentage / 100 * 0.3;',
      '    const dietEmissions = 1000 * dietFactor * (1 - localFoodReduction);',
      '',
      '    const totalEmissions = transportEmissions + energyEmissions + dietEmissions;',
      '',
      '    setResults({',
      '      transportation: transportEmissions,',
      '      energy: energyEmissions,',
      '      diet: dietEmissions,',
      '      total: totalEmissions',
      '    });',
      '  };',
      '',
      '  const handleSubmit = (e) => {',
      '    e.preventDefault();',
      '    calculateFootprint();',
      '  };',
      '',
      '  const handleSave = () => {',
      '    if (results) {',
      '      onSave({',
      '        userId,',
      '        date: new Date(),',
      '        emissions: results,',
      '        formData',
      '      });',
      '    }',
      '  };',
      '',
      '  return (',
      '    <div className="carbon-calculator">',
      '      <h2>Calculate Your Carbon Footprint</h2>',
      '      <form onSubmit={handleSubmit}>',
      '        {/* Form inputs for transportation, energy, diet */}',
      '        <button type="submit">Calculate</button>',
      '      </form>',
      '',
      '      {results && (',
      '        <div className="results">',
      '          <h3>Your Carbon Footprint</h3>',
      '          <p>Transportation: {results.transportation.toFixed(2)} kg CO2e</p>',
      '          <p>Energy Usage: {results.energy.toFixed(2)} kg CO2e</p>',
      '          <p>Diet: {results.diet.toFixed(2)} kg CO2e</p>',
      '          <p className="total">Total: {results.total.toFixed(2)} kg CO2e</p>',
      '          <button onClick={handleSave}>Save Results</button>',
      '        </div>',
      '      )}',
      '    </div>',
      '  );',
      '};',
      '',
      'export default CarbonCalculator;'
    ],
    codeLanguage: 'javascript',
    features: [
      'Carbon footprint calculator',
      'Personalized sustainability recommendations',
      'Progress tracking and analytics',
      'Community challenges and leaderboards',
      'Educational resources on sustainability'
    ],
    screenshots: [
      '/projects/project4.png',
      '/projects/project5.png'
    ]
  }
];

// More projects are in projectsData2.ts
