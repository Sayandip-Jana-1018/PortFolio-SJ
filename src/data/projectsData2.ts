import { Project } from './projectsData';

export const moreProjects: Project[] = [
  {
    title: 'FinVest',
    description: 'A personal finance and investment tracking application that helps users manage their portfolios, track performance, and make informed investment decisions based on market data and trends.',
    image: '/projects/project2.png',
    technologies: ['React', 'Redux', 'Express', 'PostgreSQL', 'Chart.js'],
    github: 'https://github.com/yourusername/finvest',
    live: 'https://finvest.vercel.app',
    category: 'Finance',
    codeSnippet: [
      'import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";',
      'import { fetchStockData, fetchPortfolioPerformance } from "../api/financeApi";',
      '',
      '// Async thunk for fetching portfolio data',
      'export const getPortfolioData = createAsyncThunk(',
      '  "portfolio/getPortfolioData",',
      '  async (userId, { rejectWithValue }) => {',
      '    try {',
      '      const response = await fetchPortfolioPerformance(userId);',
      '      return response.data;',
      '    } catch (error) {',
      '      return rejectWithValue(error.response.data);',
      '    }',
      '  }',
      ');',
      '',
      '// Async thunk for fetching stock details',
      'export const getStockDetails = createAsyncThunk(',
      '  "portfolio/getStockDetails",',
      '  async (ticker, { rejectWithValue }) => {',
      '    try {',
      '      const response = await fetchStockData(ticker);',
      '      return response.data;',
      '    } catch (error) {',
      '      return rejectWithValue(error.response.data);',
      '    }',
      '  }',
      ');',
      '',
      'const portfolioSlice = createSlice({',
      '  name: "portfolio",',
      '  initialState: {',
      '    holdings: [],',
      '    performance: {',
      '      daily: [],',
      '      weekly: [],',
      '      monthly: [],',
      '      yearly: []',
      '    },',
      '    totalValue: 0,',
      '    totalGain: 0,',
      '    totalGainPercentage: 0,',
      '    loading: false,',
      '    error: null,',
      '    selectedStock: null',
      '  },',
      '  reducers: {',
      '    addHolding: (state, action) => {',
      '      state.holdings.push(action.payload);',
      '      // Recalculate portfolio totals',
      '      state.totalValue = state.holdings.reduce(',
      '        (sum, holding) => sum + holding.currentValue,',
      '        0',
      '      );',
      '      state.totalGain = state.holdings.reduce(',
      '        (sum, holding) => sum + (holding.currentValue - holding.costBasis),',
      '        0',
      '      );',
      '      const totalCost = state.holdings.reduce(',
      '        (sum, holding) => sum + holding.costBasis,',
      '        0',
      '      );',
      '      state.totalGainPercentage = (state.totalGain / totalCost) * 100;',
      '    },',
      '    updateHolding: (state, action) => {',
      '      const { id, updates } = action.payload;',
      '      const index = state.holdings.findIndex(holding => holding.id === id);',
      '      if (index !== -1) {',
      '        state.holdings[index] = { ...state.holdings[index], ...updates };',
      '        // Recalculate portfolio totals',
      '        // Similar calculation as in addHolding',
      '      }',
      '    },',
      '    removeHolding: (state, action) => {',
      '      state.holdings = state.holdings.filter(',
      '        holding => holding.id !== action.payload',
      '      );',
      '      // Recalculate portfolio totals',
      '      // Similar calculation as in addHolding',
      '    }',
      '  },',
      '  extraReducers: (builder) => {',
      '    builder',
      '      .addCase(getPortfolioData.pending, (state) => {',
      '        state.loading = true;',
      '        state.error = null;',
      '      })',
      '      .addCase(getPortfolioData.fulfilled, (state, action) => {',
      '        state.loading = false;',
      '        state.holdings = action.payload.holdings;',
      '        state.performance = action.payload.performance;',
      '        state.totalValue = action.payload.totalValue;',
      '        state.totalGain = action.payload.totalGain;',
      '        state.totalGainPercentage = action.payload.totalGainPercentage;',
      '      })',
      '      .addCase(getPortfolioData.rejected, (state, action) => {',
      '        state.loading = false;',
      '        state.error = action.payload;',
      '      })',
      '      .addCase(getStockDetails.pending, (state) => {',
      '        state.loading = true;',
      '        state.error = null;',
      '      })',
      '      .addCase(getStockDetails.fulfilled, (state, action) => {',
      '        state.loading = false;',
      '        state.selectedStock = action.payload;',
      '      })',
      '      .addCase(getStockDetails.rejected, (state, action) => {',
      '        state.loading = false;',
      '        state.error = action.payload;',
      '      });',
      '  }',
      '});',
      '',
      'export const { addHolding, updateHolding, removeHolding } = portfolioSlice.actions;',
      'export default portfolioSlice.reducer;'
    ],
    codeLanguage: 'javascript',
    features: [
      'Portfolio tracking and management',
      'Real-time market data integration',
      'Performance analytics and visualization',
      'Investment recommendations',
      'Goal setting and tracking'
    ]
  },
  {
    title: 'EduLearn',
    description: 'An interactive e-learning platform designed for students and educators, featuring course creation tools, interactive lessons, progress tracking, and AI-powered learning recommendations.',
    image: '/projects/project5.png',
    technologies: ['Next.js', 'TypeScript', 'Firebase', 'TailwindCSS', 'WebRTC'],
    github: 'https://github.com/yourusername/edulearn',
    live: 'https://edulearn.vercel.app',
    category: 'Education',
    codeSnippet: [
      'import { useState, useEffect } from "react";',
      'import { doc, getDoc, updateDoc, arrayUnion } from "firebase/firestore";',
      'import { db } from "../firebase/config";',
      'import { useAuth } from "../contexts/AuthContext";',
      'import QuizQuestion from "../components/QuizQuestion";',
      'import ProgressBar from "../components/ProgressBar";',
      'import ResultSummary from "../components/ResultSummary";',
      '',
      'const LessonQuiz = ({ lessonId, courseId, onComplete }) => {',
      '  const { user } = useAuth();',
      '  const [questions, setQuestions] = useState([]);',
      '  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);',
      '  const [answers, setAnswers] = useState({});',
      '  const [score, setScore] = useState(0);',
      '  const [completed, setCompleted] = useState(false);',
      '  const [loading, setLoading] = useState(true);',
      '  const [error, setError] = useState(null);',
      '',
      '  useEffect(() => {',
      '    const fetchQuizQuestions = async () => {',
      '      try {',
      '        const lessonDoc = await getDoc(doc(db, "courses", courseId, "lessons", lessonId));',
      '        ',
      '        if (lessonDoc.exists()) {',
      '          const lessonData = lessonDoc.data();',
      '          setQuestions(lessonData.quizQuestions || []);',
      '        } else {',
      '          setError("Lesson not found");',
      '        }',
      '      } catch (err) {',
      '        setError("Failed to load quiz questions");',
      '        console.error(err);',
      '      } finally {',
      '        setLoading(false);',
      '      }',
      '    };',
      '',
      '    fetchQuizQuestions();',
      '  }, [lessonId, courseId]);',
      '',
      '  const handleAnswer = (questionId, selectedOption) => {',
      '    setAnswers({',
      '      ...answers,',
      '      [questionId]: selectedOption',
      '    });',
      '  };',
      '',
      '  const handleNext = () => {',
      '    if (currentQuestionIndex < questions.length - 1) {',
      '      setCurrentQuestionIndex(currentQuestionIndex + 1);',
      '    } else {',
      '      calculateScore();',
      '    }',
      '  };',
      '',
      '  const calculateScore = () => {',
      '    let correctAnswers = 0;',
      '    ',
      '    questions.forEach(question => {',
      '      if (answers[question.id] === question.correctOption) {',
      '        correctAnswers++;',
      '      }',
      '    });',
      '',
      '    const finalScore = (correctAnswers / questions.length) * 100;',
      '    setScore(finalScore);',
      '    setCompleted(true);',
      '    ',
      '    // Save quiz result to user\'s progress',
      '    saveQuizResult(finalScore);',
      '  };',
      '',
      '  const saveQuizResult = async (finalScore) => {',
      '    try {',
      '      const userProgressRef = doc(db, "userProgress", user.uid);',
      '      await updateDoc(userProgressRef, {',
      '        completedLessons: arrayUnion({',
      '          courseId,',
      '          lessonId,',
      '          completedAt: new Date(),',
      '          quizScore: finalScore',
      '        })',
      '      });',
      '      ',
      '      // Notify parent component that quiz is completed',
      '      onComplete(finalScore);',
      '    } catch (err) {',
      '      console.error("Failed to save quiz result:", err);',
      '    }',
      '  };',
      '',
      '  if (loading) return <div>Loading quiz questions...</div>;',
      '  if (error) return <div>Error: {error}</div>;',
      '  if (questions.length === 0) return <div>No quiz questions available for this lesson.</div>;',
      '',
      '  return (',
      '    <div className="quiz-container">',
      '      {!completed ? (',
      '        <>',
      '          <ProgressBar',
      '            current={currentQuestionIndex + 1}',
      '            total={questions.length}',
      '          />',
      '          ',
      '          <QuizQuestion',
      '            question={questions[currentQuestionIndex]}',
      '            selectedOption={answers[questions[currentQuestionIndex].id]}',
      '            onSelectOption={(option) =>',
      '              handleAnswer(questions[currentQuestionIndex].id, option)',
      '            }',
      '          />',
      '          ',
      '          <button',
      '            className="btn-primary mt-4"',
      '            onClick={handleNext}',
      '            disabled={!answers[questions[currentQuestionIndex].id]}',
      '          >',
      '            {currentQuestionIndex < questions.length - 1 ? "Next Question" : "Complete Quiz"}',
      '          </button>',
      '        </>',
      '      ) : (',
      '        <ResultSummary',
      '          score={score}',
      '          totalQuestions={questions.length}',
      '          correctAnswers={Object.keys(answers).filter(',
      '            key => {',
      '              const question = questions.find(q => q.id === key);',
      '              return question && answers[key] === question.correctOption;',
      '            }',
      '          ).length}',
      '          onReview={() => setCompleted(false)}',
      '        />',
      '      )}',
      '    </div>',
      '  );',
      '};',
      '',
      'export default LessonQuiz;'
    ],
    codeLanguage: 'javascript',
    features: [
      'Interactive course creation tools',
      'Live virtual classrooms',
      'Progress tracking and analytics',
      'AI-powered learning recommendations',
      'Collaborative study groups'
    ]
  }
];

// More projects in projectsData3.ts
